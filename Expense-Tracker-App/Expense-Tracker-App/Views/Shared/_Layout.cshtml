<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Boys Coffee</title>
    <link rel="icon" type="image/png" sizes="32x32" href="~/Content/images/logo.png" />

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <!--Style for navbar-->
    <style>
        body {
        background-image: url('@Url.Content("~/Content/images/bg.PNG")');
        background-size: cover;
        background-position: top ;
        background-repeat: no-repeat;
        }
        .navbar {
            background-color: #9bc9f4;
        }

        .navbar-nav li {
            position: relative;
            padding-right: 5px; /* Space after each link */
            padding-left: 5px;
            background-color:white;
        }

            .navbar-nav li:not(:last-child)::after {
                content: "";
                position: absolute;
                right: 0;
                top: 50%; /* Start from the middle */
                transform: translateY(-50%); /* Center it vertically */
                height: 60%; /* Adjust hight for a shorter vertical line */
                width: 0.1rem;
                background-color: #000; /* Vertical line color */
                margin-left: 15px; /* Adjust to add space around the vertical line */
            }

        .nav-link {
            padding-right: 10px; /* Adjust padding for the nav links if needed */
            color: black;
        }

        .vietnam-flag {
            height: 40px;
            border-radius: 0;
        }

        * {
            box-sizing: border-box;
        }

        /* The container must be positioned relative: */
        .autocomplete {
            position: relative;
            display: inline-block;
        }

        input {
            border: 1px solid transparent;
            background-color: #f1f1f1;
            padding: 0 10px;
            font-size: 16px;
            height: 40px;
            position: relative;
            display: flex;
        }

            input[type=text] {
                background-color: #f1f1f1;
                width: 100%;
            }

            input[type=submit] {
                background-color: DodgerBlue;
                color: #fff;
                cursor: pointer;
                margin-right: 20px;
                height
            }

        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /* Position the autocomplete items to be the same width as the container: */
            top: 100%;
            left: 0;
            right: 0;
        }

            .autocomplete-items div {
                padding: 10px;
                cursor: pointer;
                background-color: #fff;
                border-bottom: 1px solid #d4d4d4;
            }

                /* When hovering an item: */
                .autocomplete-items div:hover {
                    background-color: #e9e9e9;
                }

        /* When navigating through the items using the arrow keys: */
        .autocomplete-active {
            background-color: DodgerBlue !important;
            color: #ffffff;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm ">
        <div class="container">
            <a href="@Url.Action("Index", "Home", new { area = "" })" class="navbar-brand">
                <img src="~/Content/images/logo.png" alt="Application Logo" style="height: 40px;" />
            </a>

            <button type="button" class="navbar-toggler" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" title="Toggle navigation" aria-controls="navbarSupportedContent"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse d-sm-inline-flex justify-content-between">
                <ul class="navbar-nav flex-grow-1">
                    <li>@Html.ActionLink("Thực đơn", "Menu", "Home", new { area = "" }, new { @class = "nav-link" })</li>
                    <li>@Html.ActionLink("Về chúng tôi", "About", "Home", new { area = "" }, new { @class = "nav-link" })</li>
                    <li>@Html.ActionLink("Mua ngay", "Shopping", "Home", new { area = "" }, new { @class = "nav-link" })</li>
                </ul>
            </div>

            
            <form class="d-flex input-group w-auto" autocomplete="off" action="/action_page.php">
                <div class="autocomplete" style="width:300px;">
                    <input id="input" type="text" name="myDrink" placeholder="Tìm kiếm sản phẩm">
                </div>
                <input type="submit" value="Tìm kiếm">
                <img height="40px" src="~/Content/images/vietnam-flag.png" alt="Vietnam Flag" class="vietnam-flag" />
            </form>

        </div>
    </nav>
    <div class="container body-content">
        @RenderBody()

    </div>
    <!--Search bar autocomplete-->
    <script>
        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) {
                    return false;
                }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });

            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }

            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }

            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        /*An array containing all the country names in the world:*/
        var drink = [
            "Cà phê đen",
            "Cà phê sữa đá",
            "Trà đào cam sả",
            "Trà sữa",
            "Trà chanh",
            "Nước ép cam",
            "Nước ép dứa",
            "Sinh tố bơ",
            "Sinh tố xoài",
            "Cacao đá",
            "Matcha đá xay",
            "Nước dừa",
            "Chanh tuyết",
            "Sữa tươi trân châu đường đen",
            "Trà dâu tằm",
            "Soda chanh dây",
            "Sữa chua đánh đá",
            "Cà phê trứng"
        ];

        /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
        autocomplete(document.getElementById("input"), drink);
</script>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>
